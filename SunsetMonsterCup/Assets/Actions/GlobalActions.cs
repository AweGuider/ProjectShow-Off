//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Actions/GlobalActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GlobalActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GlobalActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GlobalActions"",
    ""maps"": [
        {
            ""name"": ""Join"",
            ""id"": ""0175dc6b-1401-4359-be79-501ff34cb09d"",
            ""actions"": [
                {
                    ""name"": ""Join"",
                    ""type"": ""Button"",
                    ""id"": ""88e27c7d-db28-4371-9e4e-3d7a236e8b45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf22ddec-538f-46a6-b5a3-0ec52e879f51"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Hold(duration=5),MultiTap(tapCount=5)"",
                    ""processors"": """",
                    ""groups"": ""Join"",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53b2eaef-005d-4fce-b448-635ce4f979ae"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Join"",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8df92fc0-00c3-449d-a584-40541a39706b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Join"",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06606d4d-44c3-445f-899c-f1544c205df6"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Join"",
                    ""action"": ""Join"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Join"",
            ""bindingGroup"": ""Join"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Join
        m_Join = asset.FindActionMap("Join", throwIfNotFound: true);
        m_Join_Join = m_Join.FindAction("Join", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Join
    private readonly InputActionMap m_Join;
    private List<IJoinActions> m_JoinActionsCallbackInterfaces = new List<IJoinActions>();
    private readonly InputAction m_Join_Join;
    public struct JoinActions
    {
        private @GlobalActions m_Wrapper;
        public JoinActions(@GlobalActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Join => m_Wrapper.m_Join_Join;
        public InputActionMap Get() { return m_Wrapper.m_Join; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JoinActions set) { return set.Get(); }
        public void AddCallbacks(IJoinActions instance)
        {
            if (instance == null || m_Wrapper.m_JoinActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JoinActionsCallbackInterfaces.Add(instance);
            @Join.started += instance.OnJoin;
            @Join.performed += instance.OnJoin;
            @Join.canceled += instance.OnJoin;
        }

        private void UnregisterCallbacks(IJoinActions instance)
        {
            @Join.started -= instance.OnJoin;
            @Join.performed -= instance.OnJoin;
            @Join.canceled -= instance.OnJoin;
        }

        public void RemoveCallbacks(IJoinActions instance)
        {
            if (m_Wrapper.m_JoinActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJoinActions instance)
        {
            foreach (var item in m_Wrapper.m_JoinActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JoinActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JoinActions @Join => new JoinActions(this);
    private int m_JoinSchemeIndex = -1;
    public InputControlScheme JoinScheme
    {
        get
        {
            if (m_JoinSchemeIndex == -1) m_JoinSchemeIndex = asset.FindControlSchemeIndex("Join");
            return asset.controlSchemes[m_JoinSchemeIndex];
        }
    }
    public interface IJoinActions
    {
        void OnJoin(InputAction.CallbackContext context);
    }
}
